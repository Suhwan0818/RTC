{"ast":null,"code":"var _jsxFileName = \"/Users/isangcheol/Desktop/project/nisl/nisl/src/Components/Container/FoldingChannels.js\",\n    _s = $RefreshSig$();\n\nimport { Accordion } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addChannel, selectChannel, selectRoom } from \"../modules/roomAndChannel\";\nimport PlusChannelContainer from \"./PlusChannelContainer\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccordionItemColor = styled(Accordion.Item)`\n    background-color: transparent;\n`;\n_c = AccordionItemColor;\nconst ChannelButton = styled.div`\n    background-color: transparent ;\n    color: white;\n`;\n_c2 = ChannelButton;\nconst AccordionBodyPadding = styled(Accordion.Body)`\n    padding-top:7px;\n`;\n_c3 = AccordionBodyPadding;\n\nconst FoldingChannels = _ref => {\n  _s();\n\n  let {\n    rooms\n  } = _ref;\n  const store = useSelector(state => state);\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const [channelName, setChannelName] = useState('');\n\n  const InputChannelName = e => {\n    setChannelName(e.target.value);\n  };\n\n  const InsertChannel = () => {\n    dispatch(addChannel(store.rooms[store.selectRoom].channels.length, channelName));\n  };\n\n  const chooseChannel = id => {\n    dispatch(selectChannel(id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Accordion, {\n    defaultActiveKey: \"0\",\n    children: /*#__PURE__*/_jsxDEV(AccordionItemColor, {\n      eventKey: \"0\",\n      children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n        children: \"Channels\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AccordionBodyPadding, {\n        children: [rooms.channels.map(channel => /*#__PURE__*/_jsxDEV(ChannelButton, {\n          roomId: channel.id,\n          onClick: () => chooseChannel(channel.id),\n          children: [\"# \", channel.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(ChannelButton, {\n          onClick: () => setShow(true),\n          children: \"+channel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PlusChannelContainer, {\n          set: show,\n          setShow: handleClose,\n          InsertChannel: InsertChannel,\n          InputChannelName: InputChannelName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FoldingChannels, \"2wPJX9A5Ot0ge/3rncyfvX6gh7A=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c4 = FoldingChannels;\nexport default FoldingChannels;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"AccordionItemColor\");\n$RefreshReg$(_c2, \"ChannelButton\");\n$RefreshReg$(_c3, \"AccordionBodyPadding\");\n$RefreshReg$(_c4, \"FoldingChannels\");","map":{"version":3,"sources":["/Users/isangcheol/Desktop/project/nisl/nisl/src/Components/Container/FoldingChannels.js"],"names":["Accordion","styled","useSelector","useDispatch","addChannel","selectChannel","selectRoom","PlusChannelContainer","useState","AccordionItemColor","Item","ChannelButton","div","AccordionBodyPadding","Body","FoldingChannels","rooms","store","state","dispatch","show","setShow","handleClose","channelName","setChannelName","InputChannelName","e","target","value","InsertChannel","channels","length","chooseChannel","id","map","channel","name"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,UAApC,QAAsD,2BAAtD;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,kBAAkB,GAAGR,MAAM,CAACD,SAAS,CAACU,IAAX,CAAiB;AAClD;AACA,CAFA;KAAMD,kB;AAGN,MAAME,aAAa,GAAGV,MAAM,CAACW,GAAI;AACjC;AACA;AACA,CAHA;MAAMD,a;AAKN,MAAME,oBAAoB,GAAGZ,MAAM,CAACD,SAAS,CAACc,IAAX,CAAiB;AACpD;AACA,CAFA;MAAMD,oB;;AAIN,MAAME,eAAe,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACnC,QAAMC,KAAK,GAAGf,WAAW,CAACgB,KAAK,IAAIA,KAAV,CAAzB;AACA,QAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AAEA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMc,WAAW,GAAG,MAAMD,OAAO,CAAC,KAAD,CAAjC;;AAEA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMiB,gBAAgB,GAAIC,CAAD,IAAO;AAC5BF,IAAAA,cAAc,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AACxBV,IAAAA,QAAQ,CAACf,UAAU,CAACa,KAAK,CAACD,KAAN,CAAYC,KAAK,CAACX,UAAlB,EAA8BwB,QAA9B,CAAuCC,MAAxC,EAAgDR,WAAhD,CAAX,CAAR;AACH,GAFD;;AAIA,QAAMS,aAAa,GAAIC,EAAD,IAAQ;AAC1Bd,IAAAA,QAAQ,CAACd,aAAa,CAAC4B,EAAD,CAAd,CAAR;AACH,GAFD;;AAKA,sBACI,QAAC,SAAD;AAAW,IAAA,gBAAgB,EAAC,GAA5B;AAAA,2BACI,QAAC,kBAAD;AAAoB,MAAA,QAAQ,EAAC,GAA7B;AAAA,8BACI,QAAC,SAAD,CAAW,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,oBAAD;AAAA,mBACKjB,KAAK,CAACc,QAAN,CAAeI,GAAf,CAAmBC,OAAO,iBACvB,QAAC,aAAD;AAAe,UAAA,MAAM,EAAEA,OAAO,CAACF,EAA/B;AAAmC,UAAA,OAAO,EAAE,MAAMD,aAAa,CAACG,OAAO,CAACF,EAAT,CAA/D;AAAA,2BAAgFE,OAAO,CAACC,IAAxF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH,CADL,eAII,QAAC,aAAD;AAAe,UAAA,OAAO,EAAE,MAAMf,OAAO,CAAC,IAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI,QAAC,oBAAD;AAAsB,UAAA,GAAG,EAAED,IAA3B;AAAiC,UAAA,OAAO,EAAEE,WAA1C;AAAuD,UAAA,aAAa,EAAEO,aAAtE;AAAqF,UAAA,gBAAgB,EAAEJ;AAAvG;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CApCD;;GAAMV,e;UACYb,W,EACGC,W;;;MAFfY,e;AAuCN,eAAeA,eAAf","sourcesContent":["import { Accordion } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addChannel, selectChannel, selectRoom } from \"../modules/roomAndChannel\";\nimport PlusChannelContainer from \"./PlusChannelContainer\";\nimport { useState } from \"react\";\n\nconst AccordionItemColor = styled(Accordion.Item)`\n    background-color: transparent;\n`\nconst ChannelButton = styled.div`\n    background-color: transparent ;\n    color: white;\n`\n\nconst AccordionBodyPadding = styled(Accordion.Body)`\n    padding-top:7px;\n`\n\nconst FoldingChannels = ({ rooms }) => {\n    const store = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n\n    const [channelName, setChannelName] = useState('');\n\n    const InputChannelName = (e) => {\n        setChannelName(e.target.value);\n    }\n\n    const InsertChannel = () => {\n        dispatch(addChannel(store.rooms[store.selectRoom].channels.length, channelName))\n    }\n\n    const chooseChannel = (id) => {\n        dispatch(selectChannel(id));\n    }\n\n\n    return (\n        <Accordion defaultActiveKey=\"0\">\n            <AccordionItemColor eventKey=\"0\">\n                <Accordion.Header>Channels</Accordion.Header>\n                <AccordionBodyPadding>\n                    {rooms.channels.map(channel => (\n                        <ChannelButton roomId={channel.id} onClick={() => chooseChannel(channel.id)}># {channel.name} </ChannelButton>\n                    ))}\n                    <ChannelButton onClick={() => setShow(true)}>+channel</ChannelButton>\n                    <PlusChannelContainer set={show} setShow={handleClose} InsertChannel={InsertChannel} InputChannelName={InputChannelName} />\n                </AccordionBodyPadding>\n            </AccordionItemColor>\n        </Accordion >\n    )\n}\n\n\nexport default FoldingChannels;"]},"metadata":{},"sourceType":"module"}