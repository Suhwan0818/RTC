{"ast":null,"code":"const ADD_ROOM = 'roomAndChannel/ADD_ROOM';\nconst SELECT_ROOM = 'roomAndChannel/SELECT_ROOM';\nconst ADD_CHANNEL = 'roomAndChannel/ADD_CHANNEL';\nexport const addRoom = roomName => ({\n  type: ADD_ROOM,\n  room: {\n    id: nextRoomId++,\n    name: roomName,\n    channels: []\n  }\n});\nexport const selectRoom = roomId => ({\n  type: SELECT_ROOM,\n  id: roomId\n});\nexport const addChannel = channelName => ({\n  type: ADD_CHANNEL,\n  channel: {\n    id: nextChannelId++,\n    name: channelName\n  }\n});\nlet nextRoomId = 3;\nlet nextChannelId = 3;\nconst initialState = {\n  selectRoom: 1,\n  selectChannel: 1,\n  rooms: [{\n    id: 1,\n    name: 'first room',\n    channels: [{\n      id: 1,\n      name: '1-1 channel'\n    }, {\n      id: 2,\n      name: '1-2 channel'\n    }]\n  }, {\n    id: 2,\n    name: 'second room',\n    channels: [{\n      id: 1,\n      name: '2-1 channel'\n    }, {\n      id: 2,\n      name: '2-2 channel'\n    }]\n  }]\n};\nexport default function roomAndChannel() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_ROOM:\n      return { ...state,\n        rooms: state.rooms.concat(action.room)\n      };\n\n    case SELECT_ROOM:\n      return { ...state,\n        selectRoom: action.id\n      };\n\n    case ADD_CHANNEL:\n      const tempRooms = [...state.rooms];\n      tempRooms = tempRooms[state.selectRoom - 1].channels.concat(action.channel);\n      return { ...state,\n        rooms: tempRooms\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/isangcheol/Desktop/project/nisl/nisl/src/Components/modules/roomAndChannel.js"],"names":["ADD_ROOM","SELECT_ROOM","ADD_CHANNEL","addRoom","roomName","type","room","id","nextRoomId","name","channels","selectRoom","roomId","addChannel","channelName","channel","nextChannelId","initialState","selectChannel","rooms","roomAndChannel","state","action","concat","tempRooms"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,yBAAjB;AACA,MAAMC,WAAW,GAAG,4BAApB;AACA,MAAMC,WAAW,GAAG,4BAApB;AAEA,OAAO,MAAMC,OAAO,GAAGC,QAAQ,KAAK;AAChCC,EAAAA,IAAI,EAAEL,QAD0B;AAEhCM,EAAAA,IAAI,EAAE;AACFC,IAAAA,EAAE,EAAEC,UAAU,EADZ;AAEFC,IAAAA,IAAI,EAAEL,QAFJ;AAGFM,IAAAA,QAAQ,EAAE;AAHR;AAF0B,CAAL,CAAxB;AASP,OAAO,MAAMC,UAAU,GAAGC,MAAM,KAAK;AACjCP,EAAAA,IAAI,EAAEJ,WAD2B;AAEjCM,EAAAA,EAAE,EAAEK;AAF6B,CAAL,CAAzB;AAKP,OAAO,MAAMC,UAAU,GAAIC,WAAD,KAAkB;AACxCT,EAAAA,IAAI,EAAEH,WADkC;AAExCa,EAAAA,OAAO,EAAE;AACLR,IAAAA,EAAE,EAAES,aAAa,EADZ;AAELP,IAAAA,IAAI,EAAEK;AAFD;AAF+B,CAAlB,CAAnB;AAQP,IAAIN,UAAU,GAAG,CAAjB;AACA,IAAIQ,aAAa,GAAG,CAApB;AACA,MAAMC,YAAY,GAAG;AACjBN,EAAAA,UAAU,EAAE,CADK;AAEjBO,EAAAA,aAAa,EAAE,CAFE;AAGjBC,EAAAA,KAAK,EAAE,CACH;AACIZ,IAAAA,EAAE,EAAE,CADR;AAEIE,IAAAA,IAAI,EAAE,YAFV;AAGIC,IAAAA,QAAQ,EAAE,CACN;AACIH,MAAAA,EAAE,EAAE,CADR;AAEIE,MAAAA,IAAI,EAAE;AAFV,KADM,EAKN;AACIF,MAAAA,EAAE,EAAE,CADR;AAEIE,MAAAA,IAAI,EAAE;AAFV,KALM;AAHd,GADG,EAeH;AACIF,IAAAA,EAAE,EAAE,CADR;AAEIE,IAAAA,IAAI,EAAE,aAFV;AAGIC,IAAAA,QAAQ,EAAE,CACN;AACIH,MAAAA,EAAE,EAAE,CADR;AAEIE,MAAAA,IAAI,EAAE;AAFV,KADM,EAKN;AACIF,MAAAA,EAAE,EAAE,CADR;AAEIE,MAAAA,IAAI,EAAE;AAFV,KALM;AAHd,GAfG;AAHU,CAArB;AAmCA,eAAe,SAASW,cAAT,GAAsD;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AACjE,UAAQA,MAAM,CAACjB,IAAf;AACI,SAAKL,QAAL;AACI,aAAO,EAAE,GAAGqB,KAAL;AAAYF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYI,MAAZ,CAAmBD,MAAM,CAAChB,IAA1B;AAAnB,OAAP;;AACJ,SAAKL,WAAL;AACI,aAAO,EAAE,GAAGoB,KAAL;AAAYV,QAAAA,UAAU,EAAEW,MAAM,CAACf;AAA/B,OAAP;;AACJ,SAAKL,WAAL;AACI,YAAMsB,SAAS,GAAG,CAAC,GAAGH,KAAK,CAACF,KAAV,CAAlB;AACAK,MAAAA,SAAS,GAAGA,SAAS,CAACH,KAAK,CAACV,UAAN,GAAmB,CAApB,CAAT,CAAgCD,QAAhC,CAAyCa,MAAzC,CAAgDD,MAAM,CAACP,OAAvD,CAAZ;AACA,aAAO,EAAE,GAAGM,KAAL;AAAYF,QAAAA,KAAK,EAAEK;AAAnB,OAAP;;AACJ;AACI,aAAOH,KAAP;AAVR;AAYH","sourcesContent":["const ADD_ROOM = 'roomAndChannel/ADD_ROOM';\nconst SELECT_ROOM = 'roomAndChannel/SELECT_ROOM';\nconst ADD_CHANNEL = 'roomAndChannel/ADD_CHANNEL';\n\nexport const addRoom = roomName => ({\n    type: ADD_ROOM,\n    room: {\n        id: nextRoomId++,\n        name: roomName,\n        channels: [],\n    },\n})\n\nexport const selectRoom = roomId => ({\n    type: SELECT_ROOM,\n    id: roomId,\n})\n\nexport const addChannel = (channelName) => ({\n    type: ADD_CHANNEL,\n    channel: {\n        id: nextChannelId++,\n        name: channelName,\n    }\n})\n\nlet nextRoomId = 3;\nlet nextChannelId = 3;\nconst initialState = {\n    selectRoom: 1,\n    selectChannel: 1,\n    rooms: [\n        {\n            id: 1,\n            name: 'first room',\n            channels: [\n                {\n                    id: 1,\n                    name: '1-1 channel'\n                },\n                {\n                    id: 2,\n                    name: '1-2 channel'\n                },\n            ]\n        },\n        {\n            id: 2,\n            name: 'second room',\n            channels: [\n                {\n                    id: 1,\n                    name: '2-1 channel'\n                },\n                {\n                    id: 2,\n                    name: '2-2 channel'\n                },\n            ]\n        },\n    ],\n};\n\nexport default function roomAndChannel(state = initialState, action) {\n    switch (action.type) {\n        case ADD_ROOM:\n            return { ...state, rooms: state.rooms.concat(action.room) };\n        case SELECT_ROOM:\n            return { ...state, selectRoom: action.id };\n        case ADD_CHANNEL:\n            const tempRooms = [...state.rooms];\n            tempRooms = tempRooms[state.selectRoom - 1].channels.concat(action.channel);\n            return { ...state, rooms: tempRooms };\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}